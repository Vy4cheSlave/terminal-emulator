// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	http "net/http"
	reflect "reflect"

	database "github.com/Vy4cheSlave/test-task-postgres/database"
	gomock "github.com/golang/mock/gomock"
)

// MockRestApiWorker is a mock of RestApiWorker interface.
type MockRestApiWorker struct {
	ctrl     *gomock.Controller
	recorder *MockRestApiWorkerMockRecorder
}

// MockRestApiWorkerMockRecorder is the mock recorder for MockRestApiWorker.
type MockRestApiWorkerMockRecorder struct {
	mock *MockRestApiWorker
}

// NewMockRestApiWorker creates a new mock instance.
func NewMockRestApiWorker(ctrl *gomock.Controller) *MockRestApiWorker {
	mock := &MockRestApiWorker{ctrl: ctrl}
	mock.recorder = &MockRestApiWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRestApiWorker) EXPECT() *MockRestApiWorkerMockRecorder {
	return m.recorder
}

// CreateNewCommandHandler mocks base method.
func (m *MockRestApiWorker) CreateNewCommandHandler(arg0 database.DBWorker) func(http.ResponseWriter, *http.Request) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCommandHandler", arg0)
	ret0, _ := ret[0].(func(http.ResponseWriter, *http.Request))
	return ret0
}

// CreateNewCommandHandler indicates an expected call of CreateNewCommandHandler.
func (mr *MockRestApiWorkerMockRecorder) CreateNewCommandHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCommandHandler", reflect.TypeOf((*MockRestApiWorker)(nil).CreateNewCommandHandler), arg0)
}

// GettingListCommandsHandler mocks base method.
func (m *MockRestApiWorker) GettingListCommandsHandler(arg0 database.DBWorker) func(http.ResponseWriter, *http.Request) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GettingListCommandsHandler", arg0)
	ret0, _ := ret[0].(func(http.ResponseWriter, *http.Request))
	return ret0
}

// GettingListCommandsHandler indicates an expected call of GettingListCommandsHandler.
func (mr *MockRestApiWorkerMockRecorder) GettingListCommandsHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GettingListCommandsHandler", reflect.TypeOf((*MockRestApiWorker)(nil).GettingListCommandsHandler), arg0)
}

// GettingSingleCommandHandler mocks base method.
func (m *MockRestApiWorker) GettingSingleCommandHandler(arg0 database.DBWorker) func(http.ResponseWriter, *http.Request) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GettingSingleCommandHandler", arg0)
	ret0, _ := ret[0].(func(http.ResponseWriter, *http.Request))
	return ret0
}

// GettingSingleCommandHandler indicates an expected call of GettingSingleCommandHandler.
func (mr *MockRestApiWorkerMockRecorder) GettingSingleCommandHandler(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GettingSingleCommandHandler", reflect.TypeOf((*MockRestApiWorker)(nil).GettingSingleCommandHandler), arg0)
}
