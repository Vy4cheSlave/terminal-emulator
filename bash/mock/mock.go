// Code generated by MockGen. DO NOT EDIT.
// Source: bash.go

// Package mock_bash is a generated GoMock package.
package mock_bash

import (
	reflect "reflect"
	sync "sync"

	bash "github.com/Vy4cheSlave/test-task-postgres/bash"
	models "github.com/Vy4cheSlave/test-task-postgres/models"
	gomock "github.com/golang/mock/gomock"
)

// MockBashCommandsWorker is a mock of BashCommandsWorker interface.
type MockBashCommandsWorker struct {
	ctrl     *gomock.Controller
	recorder *MockBashCommandsWorkerMockRecorder
}

// MockBashCommandsWorkerMockRecorder is the mock recorder for MockBashCommandsWorker.
type MockBashCommandsWorkerMockRecorder struct {
	mock *MockBashCommandsWorker
}

// NewMockBashCommandsWorker creates a new mock instance.
func NewMockBashCommandsWorker(ctrl *gomock.Controller) *MockBashCommandsWorker {
	mock := &MockBashCommandsWorker{ctrl: ctrl}
	mock.recorder = &MockBashCommandsWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBashCommandsWorker) EXPECT() *MockBashCommandsWorkerMockRecorder {
	return m.recorder
}

// ExecCommands mocks base method.
func (m *MockBashCommandsWorker) ExecCommands(arg0 *bash.ReqCreateNewCommandBody) (*[]models.CommandsWithoutID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecCommands", arg0)
	ret0, _ := ret[0].(*[]models.CommandsWithoutID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecCommands indicates an expected call of ExecCommands.
func (mr *MockBashCommandsWorkerMockRecorder) ExecCommands(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecCommands", reflect.TypeOf((*MockBashCommandsWorker)(nil).ExecCommands), arg0)
}

// RunSubprocess mocks base method.
func (m *MockBashCommandsWorker) RunSubprocess(arg0 *sync.WaitGroup, arg1 *string, arg2 chan<- models.CommandsWithoutID, arg3 chan<- struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RunSubprocess", arg0, arg1, arg2, arg3)
}

// RunSubprocess indicates an expected call of RunSubprocess.
func (mr *MockBashCommandsWorkerMockRecorder) RunSubprocess(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSubprocess", reflect.TypeOf((*MockBashCommandsWorker)(nil).RunSubprocess), arg0, arg1, arg2, arg3)
}
