// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	context "context"
	reflect "reflect"

	models "github.com/Vy4cheSlave/test-task-postgres/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDBWorker is a mock of DBWorker interface.
type MockDBWorker struct {
	ctrl     *gomock.Controller
	recorder *MockDBWorkerMockRecorder
}

// MockDBWorkerMockRecorder is the mock recorder for MockDBWorker.
type MockDBWorkerMockRecorder struct {
	mock *MockDBWorker
}

// NewMockDBWorker creates a new mock instance.
func NewMockDBWorker(ctrl *gomock.Controller) *MockDBWorker {
	mock := &MockDBWorker{ctrl: ctrl}
	mock.recorder = &MockDBWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBWorker) EXPECT() *MockDBWorkerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBWorker) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDBWorkerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBWorker)(nil).Close))
}

// CreateNewCommandsQuery mocks base method.
func (m *MockDBWorker) CreateNewCommandsQuery(arg0 []models.CommandsWithoutID, arg1 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewCommandsQuery", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewCommandsQuery indicates an expected call of CreateNewCommandsQuery.
func (mr *MockDBWorkerMockRecorder) CreateNewCommandsQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewCommandsQuery", reflect.TypeOf((*MockDBWorker)(nil).CreateNewCommandsQuery), arg0, arg1)
}

// GettingListCommandsQuery mocks base method.
func (m *MockDBWorker) GettingListCommandsQuery(arg0 context.Context) (*[]models.Commands, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GettingListCommandsQuery", arg0)
	ret0, _ := ret[0].(*[]models.Commands)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GettingListCommandsQuery indicates an expected call of GettingListCommandsQuery.
func (mr *MockDBWorkerMockRecorder) GettingListCommandsQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GettingListCommandsQuery", reflect.TypeOf((*MockDBWorker)(nil).GettingListCommandsQuery), arg0)
}

// GettingSingleCommandQuery mocks base method.
func (m *MockDBWorker) GettingSingleCommandQuery(arg0 uint, arg1 context.Context) (*models.Commands, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GettingSingleCommandQuery", arg0, arg1)
	ret0, _ := ret[0].(*models.Commands)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GettingSingleCommandQuery indicates an expected call of GettingSingleCommandQuery.
func (mr *MockDBWorkerMockRecorder) GettingSingleCommandQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GettingSingleCommandQuery", reflect.TypeOf((*MockDBWorker)(nil).GettingSingleCommandQuery), arg0, arg1)
}

// Ping mocks base method.
func (m *MockDBWorker) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockDBWorkerMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockDBWorker)(nil).Ping), arg0)
}
